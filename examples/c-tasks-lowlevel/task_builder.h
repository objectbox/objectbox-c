#ifndef TASK_BUILDER_H
#define TASK_BUILDER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef TASK_READER_H
#include "task_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

static const flatbuffers_voffset_t __Task_required[] = { 0 };
typedef flatbuffers_ref_t Task_ref_t;
static Task_ref_t Task_clone(flatbuffers_builder_t *B, Task_table_t t);
__flatbuffers_build_table(flatbuffers_, Task, 4)

#define __Task_formal_args , uint64_t v0, flatbuffers_string_ref_t v1, uint64_t v2, uint64_t v3
#define __Task_call_args , v0, v1, v2, v3
static inline Task_ref_t Task_create(flatbuffers_builder_t *B __Task_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Task, Task_file_identifier, Task_type_identifier)

__flatbuffers_build_scalar_field(0, flatbuffers_, Task_id, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), Task)
__flatbuffers_build_string_field(1, flatbuffers_, Task_text, Task)
__flatbuffers_build_scalar_field(2, flatbuffers_, Task_date_created, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), Task)
__flatbuffers_build_scalar_field(3, flatbuffers_, Task_date_finished, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), Task)

static inline Task_ref_t Task_create(flatbuffers_builder_t *B __Task_formal_args)
{
    if (Task_start(B)
        || Task_id_add(B, v0)
        || Task_date_created_add(B, v2)
        || Task_date_finished_add(B, v3)
        || Task_text_add(B, v1)) {
        return 0;
    }
    return Task_end(B);
}

static Task_ref_t Task_clone(flatbuffers_builder_t *B, Task_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Task_start(B)
        || Task_id_pick(B, t)
        || Task_date_created_pick(B, t)
        || Task_date_finished_pick(B, t)
        || Task_text_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Task_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* TASK_BUILDER_H */
