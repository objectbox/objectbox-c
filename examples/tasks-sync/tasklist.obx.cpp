// Code generated by ObjectBox; DO NOT EDIT.

#include "tasklist.obx.hpp"

const obx::Property<Task, OBXPropertyType_Long> Task_::id(1);
const obx::Property<Task, OBXPropertyType_String> Task_::text(2);
const obx::Property<Task, OBXPropertyType_Date> Task_::date_created(4);
const obx::Property<Task, OBXPropertyType_Date> Task_::date_finished(5);

void Task::_OBX_MetaInfo::toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const Task& object) {
    fbb.Clear();
    auto offsettext = fbb.CreateString(object.text);
    flatbuffers::uoffset_t fbStart = fbb.StartTable();
    fbb.AddElement(4, object.id);
    fbb.AddOffset(6, offsettext);
    fbb.AddElement(10, object.date_created);
    fbb.AddElement(12, object.date_finished);
    flatbuffers::Offset<flatbuffers::Table> offset;
    offset.o = fbb.EndTable(fbStart);
    fbb.Finish(offset);
}

Task Task::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t size) {
    Task object;
    fromFlatBuffer(data, size, object);
    return object;
}

std::unique_ptr<Task> Task::_OBX_MetaInfo::newFromFlatBuffer(const void* data, size_t size) {
    auto object = std::unique_ptr<Task>(new Task());
    fromFlatBuffer(data, size, *object);
    return object;
}

void Task::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t, Task& outObject) {
    const auto* table = flatbuffers::GetRoot<flatbuffers::Table>(data);
    assert(table);
    outObject.id = table->GetField<obx_id>(4, 0);
    {
        auto* ptr = table->GetPointer<const flatbuffers::String*>(6);
        if (ptr) {
            outObject.text.assign(ptr->c_str(), ptr->size());
        } else {
            outObject.text.clear();
        }
    }
    outObject.date_created = table->GetField<int64_t>(10, 0);
    outObject.date_finished = table->GetField<int64_t>(12, 0);
}

