// Code generated by ObjectBox; DO NOT EDIT.

#pragma once

#include <cstdbool>
#include <cstdint>

#include "flatbuffers/flatbuffers.h"
#include "objectbox.h"
#include "objectbox.hpp"


struct City_;

/// A city with a 2D location vector for vector search.
struct City {
    obx_id id;
    std::string name;
    /// A 2D vector representing the city's location with latitude and longitude.
    /// Using the "Geo" distance type, which specializes in geospatial search (haversine distance).
    std::vector<float> location;

    struct _OBX_MetaInfo {
        static constexpr obx_schema_id entityId() { return 1; }
    
        static void setObjectId(City& object, obx_id newId) { object.id = newId; }
    
        /// Write given object to the FlatBufferBuilder
        static void toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const City& object);
    
        /// Read an object from a valid FlatBuffer
        static City fromFlatBuffer(const void* data, size_t size);
    
        /// Read an object from a valid FlatBuffer
        static std::unique_ptr<City> newFromFlatBuffer(const void* data, size_t size);
    
        /// Read an object from a valid FlatBuffer
        static void fromFlatBuffer(const void* data, size_t size, City& outObject);
    };
};

struct City_ {
    static const obx::Property<City, OBXPropertyType_Long> id;
    static const obx::Property<City, OBXPropertyType_String> name;
    static const obx::Property<City, OBXPropertyType_FloatVector> location;
};

